1. hdfs dfs -put yahoo_stocks.csv /tmp/
2. spark_shell
3. import org.apache.spark.sql.hive.orc._
   import org.apache.spark.sql._

4. val hiveContext = new org.apache.spark.sql.hive.HiveContext(sc)
5. hiveContext.sql("use default")
6. hiveContext.sql("create table yahoo_orc_table (date1 STRING, open_price FLOAT, high_price FLOAT, low_price FLOAT, close_price FLOAT, volume INT, adj_price FLOAT) stored as orc")
7. val yahoo_stocks = sc.textFile("hdfs://sandbox.hortonworks.com:8020/tmp/yahoo_stocks.csv")
8. val data = yahoo_stocks.mapPartitionsWithIndex { (idx, iter) => if (idx == 0) iter.drop(1) else iter }
9. data.first
10. case class YahooStockPrice(date1: String, open: Float, high: Float, low: Float, close: Float, volume: Integer, adjClose: Float)
11. val stockprice = data.map(_.split(",")).map(row => YahooStockPrice(row(0), row(1).trim.toFloat, row(2).trim.toFloat, row(3).trim.toFloat, row(4).trim.toFloat, row(5).trim.toInt, row(6).trim.toFloat)).toDF()
12. stockprice.registerTempTable("yahoo_stocks_temp")
13. val results = hiveContext.sql("SELECT * FROM yahoo_stocks_temp")
14. results.show
15. results.map(t => "Stock Entry: " + t.toString).collect().foreach(println)
16. Save it as file in location: hdfs://sandbox.hortonworks.com:8020/user/root/yahoo_stocks_orc
    results.write.format("orc").save("yahoo_stocks_orc")
    Other (save as table in Hive):
    results.write.format("orc").saveAsTable("yahoo_stocks_orc"); 
	results.write.mode("overwrite").format("orc").saveAsTable("yahoo_stocks_orc_another")
	results.write.format("orc").save("yahoo_stocks_orc_another2")

Read from ORC file:
    val yahoo_stocks_orc = hiveContext.read.format("orc").load("yahoo_stocks_orc")
    yahoo_stocks_orc.registerTempTable("orcTest")
    hiveContext.sql("SELECT * from orcTest").collect.foreach(println)






*(Example for mapPartitionsWithIndex)*
val rdd1 =  sc.parallelize(List("yellow","red","blue","cyan","black", "white","brown"),3)
val mapped =   rdd1.mapPartitionsWithIndex{   (index, iterator) => { println("Called in Partition -> " + index); val myList = iterator.toList;  myList.map(x => x + " -> " + index).iterator  } }
mapped.collect

create table yahoo_orc_table (date1 STRING, open_price FLOAT, high_price FLOAT, low_price FLOAT, close_price FLOAT, volume INT, adj_price FLOAT) stored as orc LOCATION 'hdfs://sandbox.hortonworks.com:8020/user/root/yahoo_stocks_orc';


create table Addresses (name string,street string,city string,state string,zip int) stored as orc LOCATION '/tmp/';
